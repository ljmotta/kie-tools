name: "Staging :: Build"

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        required: true
      base_ref:
        type: string
        required: true
      tag:
        type: string
        required: false
        default: "0.0.0"
      commit_sha:
        type: string
        required: false
        default: "main"
      download_asset_url:
        type: string
        required: false
        default: ""
      upload_asset_url:
        type: string
        required: false
        default: ""
    secrets:
      gh_token:
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      OPENSHIFT_NAMESPACE: "kie-sandbox"
      OPENSHIFT_PART_OF: "staging-kie-sandbox-app"

      DMN_DEV_SANDBOX__baseImageRegistry: "quay.io"
      DMN_DEV_SANDBOX__baseImageAccount: "kie-tools"
      DMN_DEV_SANDBOX__baseImageName: "dmn-dev-sandbox-deployment-base-image"
      DMN_DEV_SANDBOX__baseImageTag: "${{ inputs.tag }}-prerelease"
      DMN_DEV_SANDBOX__baseImageBuildTags: "${{ inputs.tag }}-prerelease"

      DASHBUILDER__baseImageRegistry: "quay.io"
      DASHBUILDER__baseImageAccount: "kie-tools"
      DASHBUILDER_AUTHORING__baseImageName: "dashbuilder-authoring"
      DASHBUILDER_RUNTIME__baseImageName: "dashbuilder-runtime"
      DASHBUILDER__baseImageTag: "${{ inputs.tag }}-prerelease"
      DASHBUILDER__baseImageBuildTags: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX__imageRegistry: "quay.io"
      KIE_SANDBOX__imageAccount: "kie-tools"
      KIE_SANDBOX__imageName: "kie-sandbox-image"
      KIE_SANDBOX__imageBuildTags: "${{ inputs.tag }}-prerelease"

      KIE_SANDBOX_EXTENDED_SERVICES__imageRegistry: "quay.io"
      KIE_SANDBOX_EXTENDED_SERVICES__imageAccount: "kie-tools"
      KIE_SANDBOX_EXTENDED_SERVICES__imageName: "kie-sandbox-extended-services-image"
      KIE_SANDBOX_EXTENDED_SERVICES__imageBuildTags: "${{ inputs.tag }}-prerelease"

      CORS_PROXY__imageRegistry: "quay.io"
      CORS_PROXY__imageAccount: "kie-tools"
      CORS_PROXY__imageName: "cors-proxy-image"
      CORS_PROXY__imageBuildTags: "${{ inputs.tag }}-prerelease"

      DEPLOY_TAG: "${{ inputs.tag }}-prerelease"

      SERVERLESS_LOGIC_SANDBOX__baseImageRegistry: "quay.io"
      SERVERLESS_LOGIC_SANDBOX__baseImageAccount: "kie-tools"
      SERVERLESS_LOGIC_SANDBOX__baseImageName: "serverless-logic-sandbox-base-image"
      SERVERLESS_LOGIC_SANDBOX__baseImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_SANDBOX__baseImageBuildTags: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_SANDBOX__openJdk11MvnImageRegistry: "quay.io"
      SERVERLESS_LOGIC_SANDBOX__openJdk11MvnImageAccount: "kie-tools"
      SERVERLESS_LOGIC_SANDBOX__openJdk11MvnImageName: "openjdk11-mvn-image"
      SERVERLESS_LOGIC_SANDBOX__openJdk11MvnImageTag: "${{ inputs.tag }}-prerelease"
      SERVERLESS_LOGIC_SANDBOX__openJdk11MvnImageBuildTags: "${{ inputs.tag }}-prerelease"

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: "Support longpaths (Windows only)"
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: "Checkout @ GitHub default"
        uses: actions/checkout@v3
        with:
          path: kie-tools

      - name: "Checkout @ Simulated squashed-merge if PR"
        uses: ./kie-tools/.github/actions/checkout-pr
        with:
          ref: ${{ inputs.base_ref }}
          path: kie-tools

      # Skipped MacOS and Windows due to 120s timeout being reached while running hashFiles('**/pom.xml')
      # Remove condition after timeout parameter is available
      # https://github.com/actions/runner/issues/1840
      # https://github.com/actions/runner/pull/1844
      - name: "Cache Maven packages (Ubuntu only - see comments in source)"
        if: ${{ runner.os == 'Linux' }}
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-staging-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-staging-m2

      - name: "Setup environment"
        uses: ./kie-tools/.github/actions/setup-env
        with:
          working_dir: kie-tools

      - name: "Bootstrap"
        id: bootstrap
        uses: ./kie-tools/.github/actions/bootstrap
        with:
          working_dir: kie-tools

      - name: "Build"
        working-directory: ${{ github.workspace }}/kie-tools
        env:
          KIE_TOOLS_BUILD__runIntegrationTests: "false"
          KIE_TOOLS_BUILD__runTests: "false"
          KIE_TOOLS_BUILD__runLinters: "false"
          KIE_TOOLS_BUILD__buildContainerImages: "true"
          WEBPACK__minimize: "true"
          WEBPACK__tsLoaderTranspileOnly: "false"
          CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          CHROME_EXTENSION__routerRelativePath: "kogito-online-staging/${{ inputs.tag }}-prerelease/chrome-extension"
          CHROME_EXTENSION__onlineEditorUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
          CHROME_EXTENSION__manifestFile: "manifest.prod.json"
          SWF_CHROME_EXTENSION__routerTargetOrigin: "https://kiegroup.github.io"
          SWF_CHROME_EXTENSION__routerRelativePath: "kogito-online-staging/${{ inputs.tag }}-prerelease/swf-chrome-extension"
          SWF_CHROME_EXTENSION__manifestFile: "manifest.prod.json"
          ONLINE_EDITOR__buildInfo: "${{ inputs.tag }} (staging) @ ${{ inputs.commit_sha }}"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlLinux: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlMacOs: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
          ONLINE_EDITOR__kieSandboxExtendedServicesDownloadUrlWindows: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          ONLINE_EDITOR__kieSandboxExtendedServicesCompatibleVersion: "${{ inputs.tag }}"
          ONLINE_EDITOR__gtmId: ""
          ONLINE_EDITOR__corsProxyUrl: "https://staging-cors-proxy-kie-sandbox.rhba-cluster-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
          DMN_DEV_SANDBOX__gtmId: ""
          DMN_DEV_SANDBOX__onlineEditorUrl: "https://kiegroup.github.io/kogito-online-staging/${{ inputs.tag }}-prerelease"
          SERVERLESS_LOGIC_SANDBOX__buildInfo: "${{ inputs.tag }} (staging) @ ${{ inputs.commit_sha }}"
          SERVERLESS_LOGIC_SANDBOX__kieSandboxExtendedServicesDownloadUrlLinux: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_linux_${{ inputs.tag }}.tar.gz"
          SERVERLESS_LOGIC_SANDBOX__kieSandboxExtendedServicesDownloadUrlMacOs: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_macos_${{ inputs.tag }}.dmg"
          SERVERLESS_LOGIC_SANDBOX__kieSandboxExtendedServicesDownloadUrlWindows: "${{ inputs.download_asset_url }}/STAGING__kie_sandbox_extended_services_windows_${{ inputs.tag }}.exe"
          SERVERLESS_LOGIC_SANDBOX__kieSandboxExtendedServicesCompatibleVersion: "${{ inputs.tag }}"
          SERVERLESS_LOGIC_SANDBOX__corsProxyUrl: "https://staging-cors-proxy-kie-sandbox.rhba-cluster-0ad6762cc85bcef5745bb684498c2436-0000.us-south.containers.appdomain.cloud"
        run: |
          pnpm -r build:prod

      - name: "STAGING: Upload Knative CLI Workflow Plugin for Linux (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-linux-amd64
          asset_name: STAGING__kn-workflow-linux-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Knative CLI Workflow Plugin for macOS (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-amd64
          asset_name: STAGING__kn-workflow-darwin-amd64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Upload Knative CLI Workflow Plugin for macOS M1 (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: ${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-darwin-arm64
          asset_name: STAGING__kn-workflow-darwin-arm64-${{ inputs.tag }}
          asset_content_type: application/octet-stream

      - name: "STAGING: Knative CLI Workflow Plugin for Windows (Ubuntu only)"
        if: ${{ runner.os == 'Linux' && !inputs.dry_run }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        with:
          upload_url: ${{ inputs.upload_asset_url }}
          asset_path: "${{ github.workspace }}/kie-tools/packages/kn-plugin-workflow/dist/kn-workflow-windows-amd64.exe"
          asset_name: "STAGING__kn-workflow-windows-amd64-${{ inputs.tag }}.exe"
          asset_content_type: application/octet-stream
